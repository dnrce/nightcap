#!/usr/bin/env python
# nightcap, a utility to put an idle server to sleep
# Copyright (C) 2014 Daniel Rice
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

import logging
import os
import re
import signal
import subprocess
import sys
import time

# set up logging
logger = logging.getLogger()
logger.setLevel(logging.DEBUG)
fh = logging.FileHandler('/var/log/nightcap.log')
fh.setFormatter(logging.Formatter('%(asctime)s %(levelname)s %(message)s'))
ch = logging.StreamHandler()
for h in fh, ch:
  h.setLevel(logging.DEBUG)
  logger.addHandler(h)

class Nightcap:
  def __init__(self):
    self.timeout = 300
    self.router = '192.168.0.18'
    self.reset_timer()

  def pre_sleep(self):
    self.exec_ssh(self.router, 'iptables -A FORWARD -d 192.168.0.32 -s 192.168.0.0/24 -j ACCEPT')
    self.exec_ssh(self.router, 'iptables -A FORWARD -d 192.168.0.32 -p udp --dport 1194 -j ACCEPT')
    self.exec_ssh(self.router, 'iptables -A FORWARD -d 192.168.0.32 -j LOG')
    self.exec_ssh(self.router, 'iptables -A FORWARD -d 192.168.0.32 -j REJECT')

  def post_sleep(self):
    print self.exec_ssh(self.router, 'grep "user\.warn" /tmp/var/log/messages | tail')
    self.exec_ssh(self.router, 'iptables -D FORWARD -d 192.168.0.32 -j REJECT')
    self.exec_ssh(self.router, 'iptables -D FORWARD -d 192.168.0.32 -j LOG')
    self.exec_ssh(self.router, 'iptables -D FORWARD -d 192.168.0.32 -p udp --dport 1194 -j ACCEPT')
    self.exec_ssh(self.router, 'iptables -D FORWARD -d 192.168.0.32 -s 192.168.0.0/24 -j ACCEPT')

  def suspend(self):
    subprocess.call(['/usr/sbin/pm-suspend'])

  def exec_ssh(self, host, command):
    return subprocess.check_output(['ssh', '-q', host, command])

  def raid_clean(self):
    f = open('/proc/mdstat')
    mdstat = f.readlines()
    f.close()
    for line in mdstat:
      if re.match('\s*\[', line):
        return False
      m = re.search('\[[U_]+\]$', line)
      if m:
        if '_' in m.group(0):
          return False
    return True

  def active_user_sessions(self):
    #TODO: Reimplement in pure(r) Python
    f = os.popen('who -q | tail -n1 | grep -o "[0-9]*"')
    NUM_USERS_LOGGED_IN = int(f.readline())
    return NUM_USERS_LOGGED_IN > 0

  def network_active(self):
    #TODO: Reimplement in pure(r) Python
    ignored_processes = ['CrashPlanService', 'git-credential-cache--daemon', 'transmission-daemon']
    ignored_pids = []
    for process in ignored_processes:
      try:
        pid = int(subprocess.check_output(['pgrep', '-f', process]))
        ignored_pids.append(pid)
      except subprocess.CalledProcessError:
        pass
    pid_pattern = ''.join(['\| %i\/' % pid for pid in ignored_pids])
    f = os.popen('netstat -np --inet | tail -n +3 | grep -v "127\.0\.0\.1' + pid_pattern + '" | wc -l')
    num_active_connections = int(f.read())
    return num_active_connections > 0

  def safe_to_sleep(self):
    if not self.raid_clean():
      logger.info("Unclean RAID device(s)")
      return False
    if self.active_user_sessions():
      logger.info("Active user session(s)")
      return False
    if self.network_active():
      logger.info("Connections are active")
      return False
    return True

  def reset_timer(self):
    self.timestamp = time.time()

  def timed_out(self):
    current = time.time()
    return current-self.timestamp > self.timeout

  def quit(self, signum, frame):
    sys.exit()

  def loop(self):
    while 1:
      if self.safe_to_sleep():
        if self.timed_out():
          logger.info("Sleeping...")
          self.pre_sleep()
          self.suspend()
          logger.info("Wake up")
          self.reset_timer()
          self.post_sleep()
        else:
          logger.info("Idle, waiting for timeout")
      else:
        self.reset_timer()
      time.sleep(30)

if __name__ == '__main__':
  nightcap = Nightcap()
  signal.signal(signal.SIGINT, nightcap.quit)
  signal.signal(signal.SIGTERM, nightcap.quit)
  nightcap.loop()
